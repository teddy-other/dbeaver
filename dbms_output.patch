diff --git a/plugins/org.jkiss.dbeaver.ext.cubrid/plugin.xml b/plugins/org.jkiss.dbeaver.ext.cubrid/plugin.xml
index e20e3dc192..1b0e9665b5 100644
--- a/plugins/org.jkiss.dbeaver.ext.cubrid/plugin.xml
+++ b/plugins/org.jkiss.dbeaver.ext.cubrid/plugin.xml
@@ -224,4 +224,10 @@
         <manager class="org.jkiss.dbeaver.ext.cubrid.edit.CubridSequenceManager" objectType="org.jkiss.dbeaver.ext.cubrid.model.CubridSequence"/>
         <manager class="org.jkiss.dbeaver.ext.cubrid.edit.CubridViewManager" objectType="org.jkiss.dbeaver.ext.cubrid.model.CubridView"/>
     </extension>
+    
+    	<extension point="org.eclipse.core.runtime.preferences">
+        <initializer class="org.jkiss.dbeaver.ext.cubrid.internal.CubridPreferencesInitializer"/>
+    </extension>
+    
+    
 </plugin>
diff --git a/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/CubridConstants.java b/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/CubridConstants.java
index e8ca8db378..803bbc9e74 100644
--- a/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/CubridConstants.java
+++ b/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/CubridConstants.java
@@ -29,4 +29,7 @@ public class CubridConstants
     public static final String NAME = "name";
     public static final String COMMENT = "comment";
     public static final String DBA = "dba";
+    
+    public static final String PREF_DBMS_OUTPUT = "cubrid.dbms.output";
+    public static final String PREF_DBMS_OUTPUT_BUFFER_SIZE = "cubrid.dbms.output.buffer.size";
 }
diff --git a/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/internal/CubridActivator.java b/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/internal/CubridActivator.java
new file mode 100644
index 0000000000..d6f9c59693
--- /dev/null
+++ b/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/internal/CubridActivator.java
@@ -0,0 +1,80 @@
+/*
+ * DBeaver - Universal Database Manager
+ * Copyright (C) 2010-2024 DBeaver Corp and others
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jkiss.dbeaver.ext.cubrid.internal;
+
+import org.eclipse.core.runtime.Plugin;
+import org.jkiss.dbeaver.model.impl.preferences.BundlePreferenceStore;
+import org.jkiss.dbeaver.model.preferences.DBPPreferenceStore;
+import org.osgi.framework.BundleContext;
+
+/**
+ * The activator class controls the plug-in life cycle
+ */
+public class CubridActivator extends Plugin {
+
+    // The plug-in ID
+    public static final String PLUGIN_ID = "org.jkiss.dbeaver.ext.cubrid";
+
+    // The shared instance
+    private static CubridActivator plugin;
+    private BundlePreferenceStore preferenceStore;
+    // The preferences
+    private DBPPreferenceStore preferences;
+
+    /**
+     * The constructor
+     */
+    public CubridActivator() {
+    }
+
+    /*
+     * (non-Javadoc)
+     */
+    @Override
+    public void start(BundleContext context) throws Exception {
+        super.start(context);
+        plugin = this;
+        preferences = new BundlePreferenceStore(getBundle());
+    }
+
+    /*
+     * (non-Javadoc)
+     */
+    @Override
+    public void stop(BundleContext context) throws Exception {
+        plugin = null;
+        super.stop(context);
+    }
+
+    /**
+     * Returns the shared instance
+     *
+     * @return the shared instance
+     */
+    public static CubridActivator getDefault() {
+        return plugin;
+    }
+
+    public DBPPreferenceStore getPreferenceStore() {
+        // Create the preference store lazily.
+        if (preferenceStore == null) {
+            preferenceStore = new BundlePreferenceStore(getBundle());
+        }
+        return preferenceStore;
+    }
+
+}
diff --git a/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/internal/CubridPreferencesInitializer.java b/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/internal/CubridPreferencesInitializer.java
new file mode 100644
index 0000000000..45223f097d
--- /dev/null
+++ b/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/internal/CubridPreferencesInitializer.java
@@ -0,0 +1,38 @@
+/*
+ * DBeaver - Universal Database Manager
+ * Copyright (C) 2010-2024 DBeaver Corp and others
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jkiss.dbeaver.ext.cubrid.internal;
+
+import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
+import org.jkiss.dbeaver.ext.cubrid.CubridConstants;
+import org.jkiss.dbeaver.model.preferences.DBPPreferenceStore;
+import org.jkiss.dbeaver.runtime.DBWorkbench;
+import org.jkiss.dbeaver.utils.PrefUtils;
+
+public class CubridPreferencesInitializer extends AbstractPreferenceInitializer {
+
+    public CubridPreferencesInitializer() {
+    }
+
+    @Override
+    public void initializeDefaultPreferences() {
+        DBPPreferenceStore store = DBWorkbench.getPlatform().getPreferenceStore();
+
+        PrefUtils.setDefaultPreferenceValue(store, CubridConstants.PREF_DBMS_OUTPUT, true);
+        PrefUtils.setPreferenceDefaultValue(store, CubridConstants.PREF_DBMS_OUTPUT_BUFFER_SIZE, 100000);
+    }
+
+} 
\ No newline at end of file
diff --git a/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/model/CubridDataSource.java b/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/model/CubridDataSource.java
index dd59c2d232..a58a5b0d8c 100644
--- a/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/model/CubridDataSource.java
+++ b/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/model/CubridDataSource.java
@@ -19,6 +19,7 @@ package org.jkiss.dbeaver.ext.cubrid.model;
 import org.jkiss.code.NotNull;
 import org.jkiss.code.Nullable;
 import org.jkiss.dbeaver.DBException;
+import org.jkiss.dbeaver.ext.cubrid.CubridConstants;
 import org.jkiss.dbeaver.ext.cubrid.model.meta.CubridMetaModel;
 import org.jkiss.dbeaver.ext.generic.model.GenericDataSource;
 import org.jkiss.dbeaver.ext.generic.model.GenericSchema;
@@ -26,16 +27,27 @@ import org.jkiss.dbeaver.ext.generic.model.GenericTableBase;
 import org.jkiss.dbeaver.model.DBPDataSourceContainer;
 import org.jkiss.dbeaver.model.DBUtils;
 import org.jkiss.dbeaver.model.dpi.DPIContainer;
+import org.jkiss.dbeaver.model.exec.DBCException;
+import org.jkiss.dbeaver.model.exec.DBCExecutionContext;
+import org.jkiss.dbeaver.model.exec.DBCExecutionPurpose;
+import org.jkiss.dbeaver.model.exec.DBCExecutionResult;
+import org.jkiss.dbeaver.model.exec.DBCStatement;
+import org.jkiss.dbeaver.model.exec.jdbc.JDBCDatabaseMetaData;
 import org.jkiss.dbeaver.model.exec.jdbc.JDBCPreparedStatement;
 import org.jkiss.dbeaver.model.exec.jdbc.JDBCResultSet;
 import org.jkiss.dbeaver.model.exec.jdbc.JDBCSession;
 import org.jkiss.dbeaver.model.exec.jdbc.JDBCStatement;
+import org.jkiss.dbeaver.model.exec.output.DBCOutputWriter;
+import org.jkiss.dbeaver.model.exec.output.DBCServerOutputReader;
 import org.jkiss.dbeaver.model.impl.jdbc.cache.JDBCObjectCache;
+import org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext;
 import org.jkiss.dbeaver.model.impl.jdbc.JDBCUtils;
 import org.jkiss.dbeaver.model.runtime.DBRProgressMonitor;
 import org.jkiss.dbeaver.model.struct.DBSDataType;
 import org.jkiss.dbeaver.model.struct.DBSObject;
 
+import java.sql.CallableStatement;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -44,13 +56,14 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
-public class CubridDataSource extends GenericDataSource
-{
+public class CubridDataSource extends GenericDataSource {
     private final CubridMetaModel metaModel;
-    private boolean supportMultiSchema;
+    private boolean supportMultiSchema = false;
+    private boolean supportDBMSOutput = false;
     private final CubridServerCache serverCache;
     private ArrayList<CubridCharset> charsets;
     private Map<String, CubridCollation> collations;
+    private CubridOutputReader outputReader = null;
 
     public CubridDataSource(
             @NotNull DBRProgressMonitor monitor,
@@ -70,17 +83,20 @@ public class CubridDataSource extends GenericDataSource
     }
 
     @NotNull
-    public List<GenericSchema> getCubridUsers(@NotNull DBRProgressMonitor monitor) throws DBException {
+    public List<GenericSchema> getCubridUsers(@NotNull DBRProgressMonitor monitor)
+            throws DBException {
         return this.getSchemas();
     }
 
     @Nullable
-    public List<CubridServer> getCubridServers(@NotNull DBRProgressMonitor monitor) throws DBException {
+    public List<CubridServer> getCubridServers(@NotNull DBRProgressMonitor monitor)
+            throws DBException {
         return serverCache.getAllObjects(monitor, this);
     }
 
     @NotNull
-    public CubridServer getCubridServer(@NotNull DBRProgressMonitor monitor, @Nullable String name) throws DBException {
+    public CubridServer getCubridServer(@NotNull DBRProgressMonitor monitor, @Nullable String name)
+            throws DBException {
         return serverCache.getObject(monitor, this, name);
     }
 
@@ -132,7 +148,8 @@ public class CubridDataSource extends GenericDataSource
 
     @NotNull
     @Override
-    public Collection<? extends DBSDataType> getDataTypes(@NotNull DBRProgressMonitor monitor) throws DBException {
+    public Collection<? extends DBSDataType> getDataTypes(@NotNull DBRProgressMonitor monitor)
+            throws DBException {
         Map<String, DBSDataType> types = new HashMap<>();
         for (DBSDataType dataType : super.getDataTypes(monitor)) {
             types.put(dataType.getName(), dataType);
@@ -159,7 +176,8 @@ public class CubridDataSource extends GenericDataSource
     public void loadCharsets(@NotNull DBRProgressMonitor monitor) throws DBException {
         charsets = new ArrayList<>();
         try (JDBCSession session = DBUtils.openMetaSession(monitor, container, "Load charsets")) {
-            try (JDBCPreparedStatement dbStat = session.prepareStatement("select * from db_charset")) {
+            try (JDBCPreparedStatement dbStat =
+                    session.prepareStatement("select * from db_charset")) {
                 try (JDBCResultSet dbResult = dbStat.executeQuery()) {
                     while (dbResult.next()) {
                         CubridCharset charset = new CubridCharset(this, dbResult);
@@ -207,6 +225,21 @@ public class CubridDataSource extends GenericDataSource
         return this;
     }
 
+    @Override
+    protected void initializeContextState(
+            DBRProgressMonitor monitor, JDBCExecutionContext context, JDBCExecutionContext initFrom)
+            throws DBException {
+        super.initializeContextState(monitor, context, initFrom);
+
+        if (outputReader == null && checkSupportDBMSOutput(monitor, context)) {
+            outputReader = new CubridOutputReader();
+        }
+
+        if (outputReader != null) {
+            outputReader.enableDBMSOutput(monitor, context);
+        }
+    }
+
     public boolean getSupportMultiSchema() {
         return this.supportMultiSchema;
     }
@@ -219,8 +252,7 @@ public class CubridDataSource extends GenericDataSource
         @NotNull
         @Override
         protected JDBCStatement prepareObjectsStatement(
-                @NotNull JDBCSession session,
-                @NotNull CubridDataSource container)
+                @NotNull JDBCSession session, @NotNull CubridDataSource container)
                 throws SQLException {
             String sql = "select * from db_server";
             final JDBCPreparedStatement dbStat = session.prepareStatement(sql);
@@ -243,4 +275,124 @@ public class CubridDataSource extends GenericDataSource
     public boolean splitProceduresAndFunctions() {
         return true;
     }
+
+    private class CubridOutputReader implements DBCServerOutputReader {
+        @Override
+        public boolean isServerOutputEnabled() {
+            return getContainer().getPreferenceStore().getBoolean(CubridConstants.PREF_DBMS_OUTPUT);
+            // return true;
+        }
+
+        @Override
+        public boolean isAsyncOutputReadSupported() {
+            return false;
+        }
+
+        public void enableDBMSOutput(DBRProgressMonitor monitor, DBCExecutionContext context)
+                throws DBCException {
+            if (!isServerOutputEnabled()) {
+                return;
+            }
+
+            int bufferSize =
+                    getContainer()
+                            .getPreferenceStore()
+                            .getInt(CubridConstants.PREF_DBMS_OUTPUT_BUFFER_SIZE);
+            System.out.println("enableDBMSOutput bufferSize : " + bufferSize);
+            ResultSet rs = null;
+            try (JDBCSession session =
+                    (JDBCSession)
+                            context.openSession(
+                                    monitor, DBCExecutionPurpose.UTIL, "Enable DBMS output")) {
+                CallableStatement cstmt = session.getOriginal().prepareCall("CALL ENABLE(?)");
+                cstmt.setInt(
+                        1,
+                        getContainer()
+                                .getPreferenceStore()
+                                .getInt(CubridConstants.PREF_DBMS_OUTPUT_BUFFER_SIZE));
+                cstmt.execute();
+                cstmt.close();
+            } catch (SQLException e) {
+                throw new DBCException(e, context);
+            } finally {
+                try {
+                    if (rs != null) {
+                        rs.close();
+                    }
+                } catch (SQLException e) {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace();
+                }
+            }
+        }
+
+        @Override
+        public void readServerOutput(
+                @NotNull DBRProgressMonitor monitor,
+                @NotNull DBCExecutionContext context,
+                @Nullable DBCExecutionResult executionResult,
+                @Nullable DBCStatement statement,
+                @NotNull DBCOutputWriter output)
+                throws DBCException {
+            try (JDBCSession session =
+                    (JDBCSession)
+                            context.openSession(
+                                    monitor, DBCExecutionPurpose.UTIL, "Read DBMS output")) {
+                try (CallableStatement cstmt =
+                        session.getOriginal().prepareCall("CALL GET_LINE(?,?)")) {
+                    cstmt.registerOutParameter(1, java.sql.Types.VARCHAR);
+                    cstmt.registerOutParameter(2, java.sql.Types.INTEGER);
+
+                    String line;
+                    int status = 0;
+                    while (status == 0) {
+                        cstmt.execute();
+                        status = cstmt.getInt(2);
+                        System.out.println(status);
+                        if (status == 0) {
+                            line = cstmt.getString(1);
+                            output.println(null, line);
+                            System.out.println(String.valueOf(line));
+                        }
+                    }
+
+                    cstmt.close();
+
+                } catch (SQLException e) {
+                    throw new DBCException(e, context);
+                }
+            }
+        }
+    }
+
+    @Override
+    public <T> T getAdapter(Class<T> adapter) {
+        if (adapter == DBCServerOutputReader.class) {
+            return adapter.cast(outputReader);
+        }
+        return super.getAdapter(adapter);
+    }
+
+    public boolean isSupportDBMSOutput() {
+    	return supportDBMSOutput;
+    }
+    
+    private boolean checkSupportDBMSOutput(
+            @NotNull DBRProgressMonitor monitor, @NotNull DBCExecutionContext context) {
+
+        try (JDBCSession session =
+                (JDBCSession)
+                        context.openSession(
+                                monitor, DBCExecutionPurpose.UTIL, "Read Database Version")) {
+            JDBCDatabaseMetaData metaData;
+            metaData = session.getMetaData();
+            readDatabaseServerVersion(metaData);
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        supportDBMSOutput = isServerVersionAtLeast(11, 4); 
+        
+        return supportDBMSOutput;
+    }
 }
diff --git a/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/model/CubridExecutionContext.java b/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/model/CubridExecutionContext.java
new file mode 100644
index 0000000000..00e48038a5
--- /dev/null
+++ b/plugins/org.jkiss.dbeaver.ext.cubrid/src/org/jkiss/dbeaver/ext/cubrid/model/CubridExecutionContext.java
@@ -0,0 +1,34 @@
+package org.jkiss.dbeaver.ext.cubrid.model;
+
+import org.jkiss.code.NotNull;
+import org.jkiss.dbeaver.DBException;
+import org.jkiss.dbeaver.ext.generic.model.GenericExecutionContext;
+import org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance;
+import org.jkiss.dbeaver.model.runtime.DBRProgressMonitor;
+
+public class CubridExecutionContext extends GenericExecutionContext{
+
+    public CubridExecutionContext(JDBCRemoteInstance instance, String purpose) {
+        super(instance,purpose);
+    }
+    
+    @NotNull
+    @Override
+    public boolean supportsCatalogChange() {
+        return false;
+    }
+    
+    @NotNull
+    @Override
+    public boolean supportsSchemaChange() {
+        return false;
+    }
+    
+    @NotNull
+    @Override
+    public boolean refreshDefaults(DBRProgressMonitor monitor, boolean useBootstrapSettings)
+            throws DBException {
+        return false;
+    }
+    
+}
